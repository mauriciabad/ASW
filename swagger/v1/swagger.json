{
  "swagger": "2.0",
  "info": {
    "title": "API V1",
    "version": "v1"
  },
  "paths": {
      "/issues": {
         "get": {
            "tags": [
               "Issues"
            ],
            "summary": "Get all issues",
            "description": "Returns the list of all issues in the issue tracker.",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "query",
                  "name": "kind",
                  "description": "Filter the results by issue type",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "bug",
                     "enhancement",
                     "proposal",
                     "task"
                  ]
               },
               {
                  "in": "query",
                  "name": "status",
                  "description": "Filter the results by issue status",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "open",
                     "on_hold",
                     "invalid_issue",
                     "resolved",
                     "closed"
                  ]
               },
               {
                  "in": "query",
                  "name": "priority",
                  "description": "Filter the results by issue priority",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "trivial",
                     "minor",
                     "major",
                     "critical",
                     "blocker"
                  ]
               },
               {
                  "in": "query",
                  "name": "responsible",
                  "description": "Filter the results by assignee (nickname)",
                  "required": false,
                  "type": "string"
               },
               {
                  "in": "query",
                  "name": "watching",
                  "description": "Show issues watched by a user (nickname)",
                  "required": false,
                  "type": "string"
               },
               {
                  "in": "query",
                  "name": "sort",
                  "description": "Sort the results by the param specified",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "kind",
                     "status",
                     "priority",
                     "assignee_id",
                     "votes",
                     "created_at",
                     "updated_at"
                  ]
               },
               {
                  "in": "query",
                  "name": "direction",
                  "description": "Direction of the sorting (asc or desc)",
                  "required": false,
                  "type": "string",
                  "enum": [
                     "asc",
                     "desc"
                  ]
               }
            ],
            "responses": {
               "200": {
                  "description": "Returns the list of all issues",
                  "schema": {
                     "type": "array",
                     "items": {
                        "$ref": "#/definitions/IssueIndex"
                     }
                  }
               }
            }
         },
         "post": {
            "security": [
               {
                  "apiKey": []
               }
            ],
            "tags": [
               "Issues"
            ],
            "summary": "Create an issue",
            "description": "Creates an issue with the parameters in the request body and returns the full formatted issue after being created.",
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "body",
                  "name": "body",
                  "description": "Issue object that needs to be created",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/IssueCreate"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Issue created successfully",
                  "schema": {
                     "$ref": "#/definitions/IssueShow"
                  }
               },
               "400": {
                  "$ref": "#/responses/AttachmentError"
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "422": {
                  "description": "Missing issue title / Assignee does not exist",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "title": {
                           "type": "array",
                           "items": {
                              "example": "can't be blank"
                           }
                        },
                        "assignee_id": {
                           "type": "array",
                           "items": {
                              "example": "Assignee does not exist"
                           }
                        }
                     }
                  }
               }
            }
         }
      },
      "/issues/{issueID}": {
         "get": {
            "tags": [
               "Issues"
            ],
            "summary": "Get an issue",
            "description": "Returns all the information for the issue with ID <b>issueID</b>. If there is a user authenticated, it also contains whether it has voted or is watching the issue.",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Returns all issue info",
                  "schema": {
                     "$ref": "#/definitions/IssueShow"
                  }
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               }
            }
         },
         "delete": {
            "tags": [
               "Issues"
            ],
            "summary": "Delete an issue",
            "description": "Deletes the issue with ID <b>issueID</b>",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to delete",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Issue successfully deleted",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "Issue deleted successfully"
                        }
                     }
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               }
            }
         },
         "patch": {
            "tags": [
               "Issues"
            ],
            "summary": "Update an issue",
            "description": "Updates the attributes specified of the issue with ID <b>issueID</b>",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to update",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "body",
                  "name": "body",
                  "description": "Issue object with the attributes to update",
                  "required": false,
                  "schema": {
                     "$ref": "#/definitions/IssueUpdate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Issue successfully updated. Returns all issue info",
                  "schema": {
                     "$ref": "#/definitions/IssueShow"
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               },
               "422": {
                  "description": "Assignee does not exist",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "assignee_id": {
                           "type": "array",
                           "items": {
                              "example": "Assignee does not exist"
                           }
                        }
                     }
                  }
               }
            }
         }
      },
      "/issues/{issueID}/votes": {
         "post": {
            "tags": [
               "Issues"
            ],
            "summary": "Vote or unvote an issue",
            "description": "Votes or unvotes the issue with ID <b>issueID</b> as the current authenticated user",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to vote/unvote",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Issue voted / Issue unvoted",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "Issue voted"
                        }
                     }
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               }
            }
         }
      },
      "/issues/{issueID}/watches": {
         "post": {
            "tags": [
               "Issues"
            ],
            "summary": "Watch or unwatch an issue",
            "description": "Watches or unwatches the issue with ID <b>issueID</b> as the current authenticated user",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to watch/unwatch",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Issue watched / Issue unwatched",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "Issue watched"
                        }
                     }
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               }
            }
         }
      },
      "/issues/{issueID}/comments": {
         "get": {
            "tags": [
               "Issue comments"
            ],
            "summary": "Get all comments of an issue",
            "description": "Returns the list of all comments of the issue with ID <b>issueID</b>.",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Returns the list of all comments of the issue",
                  "schema": {
                     "type": "array",
                     "items": {
                        "$ref": "#/definitions/Comment"
                     }
                  }
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               }
            }
         },
         "post": {
            "tags": [
               "Issue comments"
            ],
            "summary": "Create an issue coment",
            "description": "Creates an issue comment with the parameters in the request body and returns the full formatted comment after being created.",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "consumes": [
               "application/json"
            ],
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "body",
                  "name": "body",
                  "description": "Comment object that needs to be created",
                  "required": true,
                  "schema": {
                     "$ref": "#/definitions/CommentCreate"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Comment created successfully",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueNotFound"
               },
               "422": {
                  "description": "Missing comment body",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "body": {
                           "type": "array",
                           "items": {
                              "example": "can't be blank"
                           }
                        }
                     }
                  }
               }
            }
         }
      },
      "/issues/{issueID}/comments/{commentID}": {
         "get": {
            "tags": [
               "Issue comments"
            ],
            "summary": "Get an issue comment",
            "description": "Returns all the information for the comment with ID <b>commentID</b> of the issue with ID <b>issueID</b>.",
            "produces": [
               "application/json"
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "path",
                  "name": "commentID",
                  "description": "ID of the comment",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Returns all comment info",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "404": {
                  "$ref": "#/responses/IssueOrCommentNotFound"
               }
            }
         },
         "delete": {
            "tags": [
               "Issue comments"
            ],
            "summary": "Delete an issue comment",
            "description": "Deletes the comment with ID <b>commentID</b> of the isue with ID <b>issueID</b>",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to delete",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "path",
                  "name": "commentID",
                  "description": "ID of the comment to delete",
                  "required": true,
                  "type": "integer"
               }
            ],
            "responses": {
               "200": {
                  "description": "Comment successfully deleted",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "Comment deleted successfully"
                        }
                     }
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueOrCommentNotFound"
               }
            }
         },
         "patch": {
            "tags": [
               "Issue comments"
            ],
            "summary": "Update an issue comment",
            "description": "Updates the attributes specified of the comment with ID <b>commentID</b> of the issue with ID <b>issueID</b>",
            "security": [
               {
                  "apiKey": []
               }
            ],
            "parameters": [
               {
                  "in": "path",
                  "name": "issueID",
                  "description": "ID of the issue to update",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "path",
                  "name": "commentID",
                  "description": "ID of the comment to update",
                  "required": true,
                  "type": "integer"
               },
               {
                  "in": "body",
                  "name": "body",
                  "description": "Comment object with the attributes to update",
                  "required": false,
                  "schema": {
                     "$ref": "#/definitions/CommentUpdate"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Comment successfully updated. Returns all comment info",
                  "schema": {
                     "$ref": "#/definitions/Comment"
                  }
               },
               "401": {
                  "$ref": "#/responses/UnauthorizedResponse"
               },
               "404": {
                  "$ref": "#/responses/IssueOrCommentNotFound"
               },
               "422": {
                  "description": "Body can't be blank",
                  "schema": {
                     "type": "object",
                     "properties": {
                        "body": {
                           "type": "array",
                           "items": {
                              "example": "body can't be blank"
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}